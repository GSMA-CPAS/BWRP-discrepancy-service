// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId string, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId string, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId string

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId string

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZS2/buBP/KgL//6MQuymwB5+2bbobH7wJ4rR76AYGLY1tNhLJ8OHEDfzdF3zoEYmy",
	"ZcdZ9NBTa5Hz4G9mfjNknlHCcs4oUCXR6BnJZAU5tv+9wApPQaxJAuYnF4yDUATsIsW5/ao2HNAISSUI",
	"XaJtjNY403ZlwUSOFRqhRcawQnGxlep8DgJtt+UXNv8OiTLCn4Vgom0sYalVmYJMBOGKMIpGbnNk1+LK",
	"GqHq/XlljVAFS2MuRjlIiZediorluHmmbYwEPGgiIEWjb8gbLLbfbWP0J1AQOBvTBTOgtQ9A6Jxpms5S",
	"IhMBHNNk0weiuBRkj3SmC+/7i3EsFAVxiCjT6khfS8kDnS3ljvBWVvnZykRNiQosNMJZaPD7Q5B34RkH",
	"4xoEovOUHYCbrJpcfWpn0s3V3/2QmePk/pLlvRNGgaDYFATO+olkLOm7lQvIic6PZYUpKJVBDlS18Ziz",
	"dNOu6EoishvihtRCsDzFKpw3Pqhm7f8CFmiE/jeoSHLgGXJQ2fAkKevJfJy0Yh1eNZK2cLFm7y4A3Apw",
	"CmInPH5L3GJcquBJtUU/+YW4jVsu+dUjDdmbTK8jZpcCYu5DU+R2wyFii0itIEpZom30A9JrENJKNBV8",
	"dQtNHZHVsI/jC61+X+1scQlNG/CGkhJam4J3LxL5oqr1G0iYSNuZnUKm8CzBWaIzW5gzDiLxRbC/5py4",
	"JZkZnssXQinT8wz2SYXMdUsarqs525P6g52i20jBnQcb6m4t3cbeoLfUG0KzDzQDFg5GG+gwKvGO/NmR",
	"ipyJAMmuWA7XICSHRJE1hHJVYZK5UUdBLvuzX7sQqg6AhcAb83vp5qsZoS5sPuynN9WIX8huXB42xLg+",
	"FL/A2g/W7k5fdsX2ZUALAX4obdWl7BQrBvNeONSvPgGIp5Np28Dkqh8VTW6PnYPWLHgV83PirvOYLdb0",
	"p+NsN9sjc6xmcIgdsnu7YRm2WpBCFfSlYOg+c95Hlm6KDm8FbXuPvLY4fAvrnQVWoz1dIAfqg95rtZ12",
	"unNA/Brseg12r5jmqoAGG+YtTslyF0l1DhYyvNL/Vrwmkigmuj3YABYTRtUqNMOUR6taQPiUl7eTv4Lq",
	"v153LOwaSntNsgeNwAe+Q5z4+eFQjLuGr9f08+bDVIDHjiPFRmqcjh/3Kd5a7AwWBZvhxIIGOSYZGqFM",
	"32P54yzV6Q9C5T35na0ZO+OZy6QXTLQiMiLSssjN5+lt9OF6HJmxjSxIYnGOFkzY5Zpb0bQc6hVRmXEt",
	"sGp0oRqJoeHZ8OydxYUDxZygEXpvP5m8UyuLzkCW448cPFc/xunWpoUO0PYNPGiQKqp2R43HKA7CHmac",
	"Gpb31wEITnruLoFzUCAkGn1rGjO0Vrc0vrBvYGhkz4Bi/yqM6q6jOo0qoSH2b8zB61PToq/JsNEHDWJT",
	"WfV7p8cav3ObQaqPftiwzcGxDeY881kx+C5dCVaqDhyubVPFT2MndR6jnNDqRzPhm3l7aaLwjx4Oz3+L",
	"2vjI1pltI5OcUekI5Xw4POhwR1wYLJMFXK9XirC7okeiVpFNLEzT8jwchEz8DUq60l1gnamTOe7+0hBw",
	"UVN4MoYhjcDviZHUeY7FZn+9mc0D20DkwJG39fNlEf5BaGrZzsXqjULjBulTBeHnioHSgsoIZ1nEQckX",
	"qD/bf/tQpt3Yjy2bvakXUTr9HuEuqvTenoYlOyyGefLLEZbfmiJ9zp6aHeu4/Lf82DHkHVCVfj6zhVnM",
	"VFHxqvITEmO7qqwuMykXtaKFGdQGmJPB+t0AmaxSeBmqow9JAlJGigWLtV5CqF0VlXDncNSaV9D2bvtv",
	"AAAA//+oNp03Ex8AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId string, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId string, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId string

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId string

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId int32, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId int32, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId int32

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId int32

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS2/jNhf9KwS/bylEngzQhVedVxsv3ARxZrqYGgYtXducSCTDhxNP4P9ekKIsRaIS",
	"yeMUA7SrxCLvg4f3nnukR5zwXHAGTCs8fsQq2UBO3L8fiSYzkFuagP0pJBcgNQW3yEjunuqdADzGSkvK",
	"1ngf4S3JjFtZcZkTjcd4lXGicVRuZSZfgsT7/eEJX36DRFvjT1Jy2Q6W8NS5TEElkgpNOcPjYjNya1EV",
	"jTL99ryKRpmGtQ0X4RyUIutOR+Vy1DzTPsIS7gyVkOLxV+wDltvn+wj/DgwkySZsxS1o7QNQtuSGpYuU",
	"qkSCICzZ9YEoOhjye7YwZfb9zQSRmoEcYsqNPjLXg+XAZA92R2SrqvpsVaJhVAcWGtdZevD7Q5B34RkF",
	"7zUIROcpOwC3VTW9/NCupOvLP/shsyTJ7QXPexeMBsmIbQiS9TPJeNJ3q5CQU5Mfywoz0DqDHJhu47Hk",
	"6a7d0ZUFchuihtVK8jwlOlw3/lLt2v8lrPAY/y+uSDL2DBlXMTxJqnoxH2eteUdWIVg2QFKQzx7eb4la",
	"fMo0POi26Qe/ELVRyZW4vGeheNPZFeJuKWBWPGia3OwEIL5CegMo5Ylxdxuw3oJUzqLp4Eux0PSBnIfo",
	"ZfT2T8rqY9V5Yf5OIdNkkZAsMZlrkoUAmfiC7MFw96xu3LNpPE8MNjyGE7vguAbBZaDtNjyHK5BKQKLp",
	"FkKIaUKzYvhpyFX/fmheRnV5REqys7/XxbxdUFag4aE5daBQ0/lb+Ree/XlmPrBYW7wZKcGLiFY9qk6z",
	"shF7HawuVQOYzaazdoDpZb92mt4cO7e2PCid/Vx/7jx2iwv94bjY/W7vc6mz+ozU9zzdlXTrDB3XIu8t",
	"Cgve3hfoPHaVfH2m/qi3hvor86wFmQ8YtQUQ/03ZkLAuvfp90QGPeag465YHPF0lzstKDY9mO4luSErX",
	"z/HLkFkY4QHvH1uqqOayO4EdEDnlTG86pm5xspf0x8XN9I+g+y9XHQuFYnEnWZCl6neautFggTMAtRO/",
	"6A3FuEvU/MhobX4CCNDYcZz4siI4kh5fVAAOO4tFSWYkcaBBTmiGxzgzt0R9P0tN+p0ydUt/5VvOz0RW",
	"VNITItpQhahyJHL9aXaD3l1NkNVPdEUThzNacemWa2mh2eHVXFOd2dQCq9YXrnEYHp2Nzt44XAQwIige",
	"47fuka07vXHoxOogXFT8WP2YpHtXFibA2tdwZ0BpVO1Gjdd+AdIdZpJakveyHYKiyyUjSQ4apMLjr81g",
	"ltXqkSYf3dcGPHZnwJH//obrqeM6i2ppIPJf8550WNf3sX3UzMF3aTiNOwNyV+Xh985Ol868MAel33s9",
	"4uZHwUhEiMxXTvxNFW1aOR+ohd3cJQ+Twuo8wjll1Y9mUzRr+8Le1F9mNDr/BbURUy0U3KxTgjNVkM75",
	"aDTocIP1vWe7QOr1bpJuF7qneoNc8RGWHs4jQKrEv+6oor1XxGT6ZIkX330DKRoGDzYwpAj8nggrk+dE",
	"7l7uSbs5dkNGxQXBuzyfNupvlKWOEYu7eqWrKbT2qS7h57oDbSRTiGQZEqDVE9Qf3d8+tOo29mPU5vzq",
	"RaaFf49wF536bF+LSTtyCHPp55Pk8to06uv61AxaR+qf5dAOsTigc73Oc81bajNUfhP6Ccmz3XnOl1Xc",
	"ZT8ZaQVfTASNt29ibKtKk3Wo194lCSiFNA82dL3NcLtPKuNOkdXSPXg/3/8dAAD//2L9S+fFHAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

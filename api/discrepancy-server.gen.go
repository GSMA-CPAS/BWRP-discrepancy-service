// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId string, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId string, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId string

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId string

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZSXPbNhT+Kxy0R46lODM96NTETmsdVHssJz2kHg1EPkmISYDGIlvx6L93sHAxCcok",
	"rbQ+5JSIwFvwlu99gJ9QxNKMUaBSoMkTEtEGUmz+e44lngPfkgj0z4yzDLgkYBYpTs1XucsATZCQnNA1",
	"2odoixNlVlaMp1iiCYqZWiaAwnwvVekSONrviy9s+Q0iqaU/cc5401rEYqMzBhFxkknCKJrYzYFZC0tz",
	"hMr3p6U1QiWstbkQpSAEXrcqypfD+qH2IeJwrwiHGE2+Imcw3367D9GfQIHjZEpXTEeteQBCl0zReBET",
	"EXHIMI12nWIUFpLsgS5U7n4PuQxzSYH3kmVKDnW3EO3rbyE4xGFRlmmjIBUl0rNQS2quwe33xb0tpqE3",
	"u95QtB6zJea6tmaXZ816ur78u2Nolji6u2Bp97KRwCnWjYGTjjIJizrvzTikRKVd85pBRHByDkIS65QY",
	"DC1zkDKBFKhshnPJ4l0TFkqJwGwIa1IrztIYS3/ZuZrQa79yWKEJ+mVUQu3I4eyotOGgVlSbYZi0ZC1e",
	"1Wo+d7Fi79YTuA3gGPjB8LgtYQO2qYRH2RQ9cwthM26pyC4fqM/ebH4VMLPkEbMf6iI3uwwCtgrkBoKY",
	"Rcpk3yO9BS6MRF3BF7tQ1xEYDS8Nilyr21c5W1iEphnwmpIitKYEb58V8nkJFdcQMR43KzuGROJFhJNI",
	"JaaBFhnwyDVBhw608gakFngpBkj1s6exsuJtD6k+8yIH3/6W3sh0qo6U+iSpp8yfjmao/WEJD5TQgWrM",
	"GPfg7IalcAVcw7okW/CVq8QksZRJQiq6A2CzF8ohgDnHO/17bXnaglCbNpf345uq5c9nNywO6wNdl4qf",
	"wXo5WIeHfTEYm5cKxTk4ZtvoS9EqNp/Nmx9nlx2xYHYzmMDE7mbRKQHVy5snt1vmvdU5rnlIsd5iznE2",
	"8CD1IckssOmwujO+OBOLzFXy5GuizzlId2F7H1m8y+e8ETRDPnDaQv+FrnM+jEZzN/Rko0r3XqvtuBzP",
	"BuInvetE717B6cqEemfmDY7J+hBOtXIL4V/pwV62RBDJeLsLO8B8xqjc+HhMcbZyDPiPeXEz+8ur/stV",
	"y8L/QU2HkMxjUcW+cW4jYa+Z6/WHLg+YDUPGWnkcDyRfUrw3sdOxyCENRyZokGKSoAlK1B0W309iFX8n",
	"VNyR39mWsZMsscX0DI42RAREGCi5/jS/CT5cTQPzhLEikYlzsGLcLFfcCuYFuZdEJto1z6rWhSpIhsYn",
	"45N3Ji4ZUJwRNEHvzSddeHJjojMSBQ0So6fyxzTem7JQHuy+hnsFQgbl7qD2rJUBN4eZxhrq3bUAvIzP",
	"3ilwChK4QJOvdWMa26qWpufmNQ1NzBlQ6J6ZUdV1VMVSyRWE7tHae42qW3RN6Td6r4DvSqtu73yo8Vu7",
	"GYT86BiHmRAWcHCWJa4qRt+EbcFSVU+SbSYrfpxaqdMQpYSWP+oFX6/bC52Ff9R4fPpb0IyPaJzZTDOR",
	"MSosoJyOx70ON+DiYJDM43q1U7jZFTwQuQlMYWEaF+fJgIvI3aSEbd0VVok8muP2LxceFxWFR20Y4gDc",
	"nhAJlaaY717uN715ZCaIGFnwNn4+b8I/CI0N2tlc/aDUWDZ9rCS8rRxIxakIcJIEGUjxLOpP5t8ukGk2",
	"dkPL+mzqBJRWv4twG1Q6b4+Dki0W/Tj5eYDlHw2RrmaPjY7VuPy3+NhC8np0peNnpjFzThXkrytvEBib",
	"XWV0aaac94rimqiNcEZG23cjpKtK4rWvjz5EEQgRSOZt1moLoWZXlMKt5KjBV9D+dv9vAAAA//9qFSeY",
	"ZB8AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

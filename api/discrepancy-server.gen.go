// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId int32, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId int32, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId int32

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId int32

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW/bNhf+KwTf91KI3BTYha/WJt3iCy9BnHYXXWDQ0rHNRiIZfjhxA//3gRRlKRKV",
	"SK4zFNiuEos83+c855GecMJzwRkwrfD4CatkDTlx/54TTWYgNzQB+1NILkBqCu6Qkdw91VsBeIyVlpSt",
	"8C7CG5IZd7LkMicaj/Ey40TjqLzKTL4AiXe7/RO++AaJtsKfpOSybSzhqVOZgkokFZpyhsfFZeTOosoa",
	"Zfr9aWWNMg0ray7COShFVp2KyuOoGdMuwhLuDZWQ4vFX7A2W1293Ef4dGEiSTdiS26S1A6BswQ1L5ylV",
	"iQRBWLLtk6JoL8gf2NyU3vcXE0RqBnKIKDf6QF/3kgOd3csd4K2q+rPViYZRHTiw9ZxenrWLdH35Zz+j",
	"C5LcXfC8dy00SEZsr5Gsn0jGk75XhYScmvzQgZuB1hnkwHQ7HwuebtvDUkkgdyFqSC0lz1OiwyXxfWnP",
	"/i9hicf4f3GFP7EHn7iy4fFH1fvkMGnNO7wKpWUNJAX5YvD+StSCKqbhUbdFz/xB1M5KrsTlAwvZm86u",
	"EHdHAbHiQVPkZisA8SXSa0ApT4yrbUB6A1I5iaaCL8VBUwdyGqLXs7d71lbnFYqEoTGFTJN5QrLEZG5I",
	"5gJk4huyB3g8sLpwz6HxQDNY8EC4CabjGgSXgbFb8xyuQCoBiaYbCGVME5oVe0VDrvrPQ7MYVfGIlGRr",
	"f6+KVTanrMiGT82xDYWGzlflXxj7y8i8R7E2LzJSgt/PrX5UnWLlIPYKrM4CAzmbTWdtA9PLfuM0vTl0",
	"b214kJX6vf5SPPaKM312mO1+1ftcUpg+K/UjT7cl3DpBh7XIa4vCXLJ3AZ3Grpav79Qf1TZkkRZh/rdD",
	"u3bo81cOn6fbsrHCm9QujhuS0tVLcBBeXS3C3f0WtaGKai67DW2ByClnet2xDIsIXqMFFzfTP4Lqv1x1",
	"HBREwoUyJwvVD4HqQoN5x4D3lCO/2gzNcRfX+JGN13zpDaDLYVD1+qI+ELVeXcwudzYXJQqRxCUNckIz",
	"PMaZuSPq+0lq0u+UqTv6K99wfiKyopOeIciaKkSVm/7rT7Mb9OFqgiytoUuauDyjJZfuuOYWKhdthDXV",
	"mXUtcGp14Rr44NHJ6OSdy4sARgTFY/zePbJ9p9cuO7Ha8wkVP1U/JunOtYUJwO013BtQGlW3Uf2jgLMn",
	"XTCT1KKzZ9MQ5ELOGUly0CAVHn9tGrPoVbc0Oce2FnjsYsCR/+KE667jOkxqaSDy3696YdkuavrgpzTs",
	"xr0Bua388Hdnx3PnthAHpT96muAWYYFIRIjMd078TRVjWikfSFHdwiSPk0LqNMI5ZdWP5lA0e/vCVuov",
	"Mxqd/oLaGVOtLLhlpgRnqgCd09FoUHCDabdHu4Dr9WmS7hZ6oHqNXPMRlu7jESBV4t9CVDHeS2IyfTTH",
	"iy+dARcNg0drGFIE/k6ElclzIrevz6S9HLslo+IC4J2fzwf1N8pSh4hFrd6oNAUFPlYRfq4aaCOZQiTL",
	"kACtnmX9yf3tA6vuYj9Ebe6vXmBa6PcZ7oJT7+1bIWmHD2Es/XwUX94aRn1fHxtB65n6ZzG0gywOmFzP",
	"89zwltwMlZ9qfkLwbE+e02UZdzlPRlrCFxNB4827GNuu0mQVmrUPSQJKIc2DA10fM9yek0q4k2S1eA/e",
	"3e7+DgAA//8u/d9TtxsAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

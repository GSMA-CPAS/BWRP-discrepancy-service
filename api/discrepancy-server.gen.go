// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId string, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId string, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId string

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId string

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZSXPbNhT+Kxi0R46lODM96NRsrXVQ7bGc9JB6NBD5JCEmARiLbMWj/94BCC4mQYmS",
	"ldaHnGwSeAve8r0P1BOOeSY4A6YVHj1hFa8gI+7fj0STKcg1jcE+CskFSE3BLTKSubd6IwCPsNKSsiXe",
	"RnhNUuNWFlxmROMRXqScaBwVW5nJ5iDxdlu+4fNvEGsr/ElKLtvGYp44lQmoWFKhKWd4lG9Gbi2qrFGm",
	"355X1ijTsLTmIpyBUmTZqahYjppn2kZYwr2hEhI8+oq9wWL77TbCfwIDSdIxW3AbtPYBKJtzw5JZQlUs",
	"QRAWb56FKOFmnkI7RlEpyR/YzBTuHyAniNQM5EGy3Ohj3S1FD/W3FDzGYVVVaaseDaM6sNBIaqHB7w/F",
	"vSumUTC7wVB0HrMj5ra2Jpcf2vV0ffl3nxaL8JzEdxc8g367bbNIRmxbkLSfSMrjvluFhIya7FhsmILW",
	"KWTAdDsec55s2n1dSSC3IWpILSTPEqLDdeOTatd+lbDAI/zLoILKgcfJQWXDQ6WqV/Nx0pp3eNUo2sLF",
	"mr3bQOBWQBKQO8Pjt0Qt3GUaHnVb9INfiNpxy5S4fGAhe5PpFeJuKSCWv2iK3GwEIL5AegUo4bFx2Q9I",
	"r0EqJ9FU8CVfaOpATsM+pC+0+n21s0VlaNoBbygpQ+tK8PZZIX+sev0aYi6TdmUnkGoyi0kam9Q15kyA",
	"jH0T7O+5XNyBzIzMVU88rUuFzO2A8QdWd7afk4fOigI7Dzb0SmZLfSA050AzYeFktAMdjkq0o352lKLg",
	"MgCyK57BFUglINZ0DaFa1YSmOeHRkKn+6NduhGoCECnJxj4vc5Y1oyxPm0/76U018heyG5WHDSGuT8XP",
	"YO0P1u5JX07F9pXASAmel7b6UnWKTSfT9svJZT/4mNwcy10SfyvoFf76vSuQ2TUPXsg8T9yl2G5xx/hw",
	"3Dma45HnqGZj6o+4dxqWaaslKdRBnwuE7sPz3vNkU0x4J+jGO/LaovBdrHc6nEZ3rQsko070XqrttOwu",
	"D8RPYteL2L2AzVUJDQ7MG5LQ5S6Q6iQWKrxyAHVZU0U1l90ubIDICWd6FSIx5dmqGRA+5sXN5K+g+i9X",
	"HQv/Bys9hmCeiiceGucuBvaSod78RhUAs+OQsVEepwPJfYq3LnY2FgWkkdgFDTJCUzzCqbkj6vtZYpLv",
	"lKk7+jtfc34m0ryYnsHRiipElYOS60/TG/Tuaowsd6MLGrs4owWXbrnmFpqWzF5TnVrXAqtWF64hGR6e",
	"Dc/euLgIYERQPMJv3StbeHrlojNQJQdSg6fqYZxsXVmYAHZfw70BpVG1GzW+SAmQ7jDjxEK9vxNAkO7l",
	"FwqSgQap8Ohr05jFtrql8Uf3IQyP3Blw5D8Q47rruI6lWhqI/Ofm4B2qadE3ZdjovQG5qaz6vdNjjd/m",
	"m0Hp955xuAmRAw4RIvVVMfim8hasVB3IsN1kJY/jXOo8whll1UOz4Jt1e2Gz8I8ZDs9/Q+34qNaZ3TRT",
	"gjOVA8r5cHjQ4Y64NTgkC7he7xTpdqEHqlfIFRZhSXkeAVLF/hql8tZdEJPqkzme/+gQcNEweLSGIUHg",
	"90RYmSwjcrO/3+zmgZsgapCDt/PzeRP+QVni0C7P1Q9KTc6mT5WE15UDbSRTiKQpEqDVs6g/ub99INNt",
	"7IeWzdnUCyhz/T7CXVDpvT0NSnZYDOPk5yMs/2iI9DV7anSsx+W/xccOkndAV3p+5hqz4FSo+LTyCoGx",
	"3VVOl2XKRa8YaYnagAg6WL8ZYFtVmixDffQujkEppHmwWesthNtdUQl3kqMWX8Hb2+2/AQAA//9gV6Hq",
	"Hh8AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

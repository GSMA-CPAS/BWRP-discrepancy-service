// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId string, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId string, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId string

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId string

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZSXPbNhT+Kxy0R46lODM96NTETmsdVHssJz2kHg1EPkmISQDGIlvx6L93AIKLSVAm",
	"aaX1ISebBN6Ct3zvA/WEIpZyRoEqiSZPSEYbSLH99xwrPAexJRGYRy4YB6EI2EWKU/tW7TigCZJKELpG",
	"+xBtcaLtyoqJFCs0QTHTywRQmO+lOl2CQPt98YYtv0GkjPQnIZhoWotYbHXGICNBuCKMokm2ObBrYWmO",
	"UPX+tLRGqIK1MReiFKTE61ZF+XJYP9Q+RALuNREQo8lX5Azm22/3IfoTKAicTOmKmag1D0DokmkaL2Ii",
	"IwEc02jXKUZhIcke6ELn7veQ41goCqKXLNNqqLuFaF9/C8EhDsuyTBsFqSlRnoVaUnMNbr8v7m0xDb3Z",
	"9Yai9ZgtMTe1Nbs8a9bT9eXfHUOzxNHdBUu7l40CQbFpDJx0lElY1HkvF5ASnQ4GiDkolUAKVDWDsmTx",
	"rtncpURgN4Q1qZVgaYyVv3hcZs3arwJWaIJ+GZWAOXJoOSptOMCU1ZIeJq1Yi1e1ys1drNi79QRuAzgG",
	"cTA8bkvYAF+q4FE1Rc/cQtiMWyr55QP12ZvNrwJmlzxi2Yu6yM2OQ8BWgdpAELNI2+x7pLcgpJWoK/iS",
	"LdR1BFbDS3Cfa3X7KmcLi9A0A15TUoTWluDts0I+Lxv+GiIm4mZlx5AovIhwEunE9uaCg4hcE3Toukze",
	"Qs0CL+UAqX72DOJVvO0h1Qf1cwjtb+mNzJjqYKjPg3rK/OlohtoflvBACR2oRs6EB2c3LIUrEJJDpMgW",
	"fOWqMEky4qMgld0BsNkL5RDAQuCdeV5nbGtBaJY2l/fjm6rlz2c3LA7rA12Xip/BejlYh4d9MRibVwMt",
	"BDh+2uhL2So2n82bL2eXHbFgdjOYwMTuftApAdUrmCe3W+a9mznGeEix2WLPcTbwIPUhyTJgM2F1Z3xx",
	"JhaZq+TJ10Sfc5DuwvY+sniXz3kraId84LSF/mtZ53xYjfaG58lGle69VttxOV4WiJ/0rhO9ewWnKxPq",
	"nZk3OCbrQzjVyi2kf6UHe9kSSRQT7S7sAIsZo2rj4zHF2cox4D/mxc3sL6/6L1ctC/8HNR1CMo9FFfvG",
	"uY2EvWau1z9XecBsGDLWyuN4IPmS4r2NnYlFDmk4skGDFJMETVCi77D8fhLr+Duh8o78zraMnfAkK6Zn",
	"cLQhMiDSQsn1p/lN8OFqGhj6RlYksnEOVkzY5Ypbwbwg94qoxLjmWTW6UAXJ0PhkfPLOxoUDxZygCXpv",
	"X5nCUxsbnZEsaJAcPZUP03hvy0J7sPsa7jVIFZS7g9rHKQ7CHmYaG6h31wLwMr7sToFTUCAkmnytGzPY",
	"VrU0PbffxNDEngGF7mMxqrqOqliqhIbQfXr2XqPqFl1T+o3eaxC70qrbOx9q/DbbDFJ9dIzDTogMcDDn",
	"iauK0TeZtWCpqifJtpMVP04zqdMQpYSWD/WCr9fthcnCP3o8Pv0taMZHNs5sp5nkjMoMUE7H416HG3Bx",
	"sEjmcb3aKcLuCh6I2gS2sDCNi/NwEDJyNymZte4K60QdzfHs9wePi5rCozEMcQBuT4ikTlMsdi/3m9k8",
	"shNEjjLwtn4+b8I/CI0t2mW5+kGpydj0sZLwtnKgtKAywEkScFDyWdSf7N8ukGk3dkPL+mzqBJSZfhfh",
	"Nqh03h4HJVss+nHy8wDLPxoiXc0eGx2rcflv8bGF5PXoSsfPbGPmnCrIv668QWBsdpXVZZhy3itaGKI2",
	"wpyMtu9GyFSVwmtfH32IIpAyUMzbrNUWQs2uKIVbyVGDr6D97f7fAAAA///Wv7YJKh8AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId int32, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId string, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId int32

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId string

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS3PbNhD+Kxy0R46lODM96NTETmsdVHssJz2kHg1EriTEJEDjIVvx6L938ODDBChT",
	"spzJISdbBPaBb3c/fOQTSlheMApUCjR6QiJZQY7Nv+dY4inwNUlA/yw4K4BLAmaR4tw8lZsC0AgJyQld",
	"om2M1jhTZmXBeI4lGqFFxrBEcbmVqnwOHG231RM2/waJ1MafOGfcD5aw1LhMQSScFJIwikZ2c2TW4joa",
	"ofL9aR2NUAlLHS5GOQiBl52OyuW4faZtjDjcK8IhRaOvyAUst99uY/Q3UOA4G9MF06D5ByB0zhRNZykR",
	"CYcC02TTB6K4MmQPdKbK7PubFZhLCnwfU6bkgblWlnsmW9kdkK2o+9PrREWJDCy0yll6cPtDkHfhGQfr",
	"GgSi85QdgOuumlye+Z10fflvP2TmOLm7YHnvhpHAKdYDgbN+JhlL+m4tOORE5YeywhSkzCAHKn085izd",
	"+BNdW0RmQ9yyWnCWp1iG+8YVVa/9zmGBRui3QU2SA8eQgzqGI0nRbObDrCXryKrVtGWKjXi3AeBWgFPg",
	"O+FxW2KPcamER+mbnrmF2MctF8XlAw3Fm0yvImaWAmb2QdvkZlNAxBaRXEGUskSZ6ges18CFsWg7+GIX",
	"2j4i4+Elji+9un2Ns8UVND7gLScVtKYFb5818nk969eQMJ76nZ1CJvEswVmiMjOYswJ44oagB6s+0KZx",
	"fyOffVOm5hkEB9tx2d6Buqm+O9gbcH2ToD1ebgEYPm28o047Sl4wHiCzFcvhCrgoIJFkDaGekJhkVlJI",
	"yEV/lvEbrmZazDne6N9Lq2NmhNpyuHIeP1SrLqG4cXXYELO5UvwC62Wwdt+o1e3ji27FOTjx582b6DQr",
	"BXAvHJqvGAGIp5OpH2By2Y9iJjeH6o01C77yOD226zx6iwl9dljs9jXELFtpHGKL7Iu3TlW2RpFCE/S5",
	"ZN4+euojSzflTWoMzTUaOW9x+G2ndxcYj+Z0gR5oCqrXejuuirJA/BJQvQTUK1RTXdDghXmDU7LcRVL7",
	"CIYY7fHyuSaCSMa7E9gA5hNG5SokTaqT1TdA+JAXN5N/gu6/XHUsWEliTjLDc9HvNE2jvZXmHqgd+S1/",
	"X4y7tNdrrvP2958AjR3Gia3WOB49vuR4a7DTWJRkhhMDGuSYZGiEMnWHxfeTVKXfCRV35E+2ZuykyGwn",
	"PSOiFREREYZErj9Nb6IPV+NIqzayIInBOVowbpYbaUXTSqtLIjOdWmBV+0INDkPDk+HJO4NLARQXBI3Q",
	"e/NI951cGXQGolI/YvBU/xinW9MWKsDa13CvQMio3h21vvkUwM1hxqkmefc2AEGhZ18lcA4SuECjr+1g",
	"mtWakcbn5lMTGpkzoNh9fEXN1FGTRSVXELtPuc8mrOvj6DZu5+CmNJzGvQK+qfNwe6fHS+fWmoOQH50e",
	"MfeHZSRcFJnrnME3Yce0dr6n/jb3Ln4cW6vTGOWE1j/aQ9Hu7Qtdqf/UcHj6R+QjJjwUzF0nCkaFJZ3T",
	"4XCvwx3wTmHYLpB6c5q42RU9ELmKTPNhmlbnKYCLxL1kCTveC6wyebTE7Uf/QIqKwqMODGkEbk+MhMpz",
	"zDcvz6TePDCXjBhYgjd5Ph/UvwhNDSPaWr1RaazWPlYRfq4aSMWpiHCWRQVI8Qz1J/O3D62ajf0YtX1/",
	"9SJT698h3EWnLtud1OWp3i7e7IgYZs7PB0R+a4p0PXtsdmzi8mP5sUMI7jGVTsOZwSx1V1R+ePkJidGf",
	"KuNLq+lyVhTXYm6ACzJYvxsg3VUSL0Nz9CFJQIhIsuCwNkcI+VNRG3cKKE/ToO3t9v8AAAD//+ss0vOe",
	"HgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

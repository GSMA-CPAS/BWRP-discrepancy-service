// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId int32, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId int32

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWUW/bNhD+K8Rtj0LspsAe9LS26VY/ZAuStC9dENDS2WYrkQx5dOIG+u8DSclWJLpx",
	"Ag/Yk2Ud7/jxu+876hEKVWslUZKF/BFsscKah8ePxijjH7RRGg0JDK8LVaL/LdEWRmgSSkIeF7MQy2Ch",
	"TM0JchCS3p5CBrTRGP/iEg00GdRoLV/uLdSFt6mWjJBLaJoMDN45YbCE/Cu0G3bLb5oM/kSJhlczuVBn",
	"nPj4AELOlZPlbSlsYVBzWWz86y3oRaU47XaWrp5HzF2iupe3rkN/eJrmhiSal6QqR6/Eus18Idht3ivQ",
	"WjRrUYTFg65l4KSgRMD383O3w9M2zVW5GcvjvSo3TC0YrZCFROYrMjX/hoUHlWx1eCSsw7tfDS4gh18m",
	"O+FPWtVPQsWgmmZ7Pm4M3/SpOUa13YsWeZPBCnmJZnzkeMw2mo3cKAkfaJz1oQ1k417UVv99L1NbnV9d",
	"MBVCibT4YphyHeiPDSlV4WqUyU3XaGzIGBb4EgPDGqGvSf8PiBtMhJanm05Y6RmwUjVe81Isk2L9qZBH",
	"ftg/5NbCClJm/0Yb5OZcSVr9zBpnO++nD/Pp+vyvZPkvF3sCJVbEo7Vv+dweZu9+kkZT+EYfNlNeNoKO",
	"PHleyvElamVozPIy3iu3QkY8rZgPmgTDOykxXV43qgbSON7Ueq5wE7jzXHRTiBeBNKy5qCCHyn3n9sdJ",
	"6cofQtrv4ne1VupEV1FJTybISlgmbHD/5cera/buYsasxkIsRBF4ZgtlQrgHi121Pc+ABFUeWiLqa0Fv",
	"+MD0ZHryJvCiUXItIIe34ZXXHa0CO5OgPDuJXQ+n8kIIUGYl5PCHkGWgyYIfPlYraaNITqfT7VSO9uBa",
	"V+0xJt9s1Eyk+qBGRI0+Jax/ThPUyu4FrZgfaozLkrUOYhqNLTQWJNYYeV9wV9HREMYvxARCJ/HB74sl",
	"w3ZNBtbVNTcbyOESyRlpGa8qppFsCHesP4bfWdkEC7rE1XaJdw4tsbCQ9T+NskGjPvCqcBUnHIo6tNvw",
	"GgmNhfzrcItAZazfMjw7A693yINOIAPJay+6Fi30byEyDrMeh89eFU02BNC1cA+GO4dmswPRrv58FCw3",
	"MR0tvW8/wQ4Wy+EDJnyH8IdZTDjNoBZy92c4a4b6+uTb84+bTk9/Yymm7IiC5r826vgGOZZz7f/Luvu8",
	"F2r5i7hzlDP+HphwLSbrNxPwuiK+TLntXVGgtYxU0tJ9o8HYKbtki0QVho/HZIVdHJqb5t8AAAD//yiJ",
	"tZz6DgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

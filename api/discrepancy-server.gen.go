// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId string, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId string, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId string

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId string

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTW/bOBP+KwTf9yjEbgrswadtm+7GB2+COO0euoFBS2ObjUQy/HDiBv7vC1LURyTK",
	"lh1n0UNPrUXOB5+ZeWbIPOOYZ4IzYFrh0TNW8Qoy4v57QTSZglzTGOxPIbkAqSm4RUYy91VvBOARVlpS",
	"tsTbCK9JatzKgsuMaDzCi5QTjaNiKzPZHCTebssvfP4dYm2FP0vJZdtYzBOnMgEVSyo05QyP8s3IrUWV",
	"Ncr0+/PKGmUaltZchDNQiiw7FRXLUfNM2whLeDBUQoJH37A3WGy/20b4T2AgSTpmC25Bax+Asjk3LJkl",
	"VMUSBGHxpg9EUSnIH9nMFN73FxNEagbyEFFu9JG+lpIHOlvKHeGtqvKzlYmGUR1YaISz0OD3hyDvwjMK",
	"xjUIROcpOwC3WTW5+tTOpJurv/shMyfx/SXPeieMBsmILQiS9hNJedx3q5CQUZMdywpT0DqFDJhu4zHn",
	"yaZd0ZUEchuihtRC8iwhOpw3Pqh27f8SFniE/zeoSHLgGXJQ2fAkqerJfJy05h1eNZK2cLFm7y4A3ApI",
	"AnInPH5L1GJcpuFJt0U/+YWojVumxNUjC9mbTK8Rd0sBsfxDU+R2IwDxBdIrQAmPjYt+QHoNUjmJpoKv",
	"+UJTB3Ia9nF8odXvq50tKqFpA95QUkLrUvDuRSJfVLV+AzGXSTuzE0g1mcUkjU3qCnMmQMa+CPbXXC7u",
	"SGZG5uqFUMLNPIV9UiFz3ZKW62rO9qT+YKfoNlJw58GGultLt7E36C31htDsA82AhYPRBjqMSrQjf3ak",
	"ouAyQLIrnsE1SCUg1nQNoVzVhKb5qKMhU/3Zr10IVQcgUpKN/b3M56sZZXnYfNhPb6oRv5DdqDxsiHF9",
	"KH6BtR+s3Z2+7Irty4CREvxQ2qpL1Sk2nUzbHydX/ehjcnvs7JL4+0Av+Os3rkBk1zx4FfNz4i7Fdos7",
	"xqfjztFsjzxnNYupP+LebliGrRakUAV9KRi6z5z3kSebosM7QdfekdcWhW9hvcPhNLoLXSAY9UHvtdpO",
	"O93lQPwa7HoNdq+Y5qqABhvmLUnochdJdQ4WKrzS/1a8popqLrs92ACRE870KjTDlEerWkD4lJe3k7+C",
	"6r9edyzsGkp7TbIHjcAHvkOc+PnhUIy7hq/X9PPmw1SAx44jxUZqnI4f9yneOuwsFgWbkdiBBhmhKR7h",
	"1NwT9eMsMckPytQ9/Z2vOT8TaZ5JL5hoRRWiyrHIzefpLfpwPUZ2bKMLGjuc0YJLt1xzC03LoV5TnVrX",
	"AqtWF66RGB6eDc/eOVwEMCIoHuH37pPNO71y6AxUOf6owXP1Y5xsXVqYAG3fwIMBpVG1GzUeowRId5hx",
	"YlneXwcgOOnldwmSgQap8Ohb05iltbql8YV7A8MjdwYc+VdhXHcd12lUSwORf2MOXp+aFn1Nho0+GJCb",
	"yqrfOz3W+F2+GZT+6IcN1xxytiFCpD4rBt9VXoKVqgOHa9dUydM4lzqPcEZZ9aOZ8M28vbRR+McMh+e/",
	"oTY+qnVm18iU4EzlhHI+HB50uCMuDI7JAq7XK0W6XeiR6hVyiUVYUp5HgFSxv0GpvHQXxKT6ZI7nf2kI",
	"uGgYPFnDkCDweyKsTJYRudlfb3bzwDUQNcjJ2/n5sgj/oCxxbJfH6o1Ckw/SpwrCzxUDbSRTiKQpEqDV",
	"C9Sf3b99KNNt7MeWzd7Uiyhz/R7hLqr03p6GJTsshnnyyxGW35oifc6emh3ruPy3/Ngx5B1QlX4+c4VZ",
	"zFSoeFX5CYmxXVVOl52Ui1ox0g5qAyLoYP1ugG1WabIM1dGHOAalkObBYq2XEG5XRSXcORy15hW8vdv+",
	"GwAA//+RMGrbEx8AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

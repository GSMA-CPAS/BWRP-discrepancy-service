// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId string, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId string, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId string

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId string

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZSXPbNhT+Kxy0R46lODM96NQkdhsdVHssOz2kHg1EPkmISYDGIlvx6L93sHAxCcok",
	"rbQ+5JSIePvyvQf4CUUszRgFKgWaPCERbSDF5r9nWOI58C2JQP/MOMuASwLmkOLUfJW7DNAECckJXaN9",
	"iLY4UeZkxXiKJZqgmKllAijMaalKl8DRfl98YctvEEnNfc45401tEYuNzBhExEkmCaNoYokDcxaW6giV",
	"709LbYRKWGt1IUpBCLxuFZQfh3Wn9iHicK8IhxhNviKnMCe/3YfoT6DAcTKlK6aj1nSA0CVTNF7EREQc",
	"MkyjXacYhQUne6ALlZvfgy/DXFLgvXiZkkPNLVj72lswDjFYlGXaKEhFifQc1JKaS3D0vri3xTT0Ztcb",
	"ilY3W2Kua2t28alZT+fnHzqG5vymI+HVxd8dKZc4uvvM0u6VKIFTrHsNJx15EhZ1ps04pESlXUsFS0gS",
	"IjuXVgYRwckZCEmsE2Iwus1BygRSoLKZ0SWLd01kKjkCQxDWuFacpTGW/sp3ZanPfuWwQhP0y6hE+5GD",
	"+lGpw6G9qPbjMG7JWqyqtV1uYkXfrSdwG8Ax8IPhcSRhY3JQCY+yyfrJHYTNuKUiu3igPn2z+WXAzJGH",
	"zX6os1zvMgjYKpAbCGIWKZN9D/cWuDAcdQFf7EFdRmAkvDSrcqmOruJbWISmGfCakCK0pgRvnxXyWYlW",
	"VxAxHjcrO4ZE4kWEk0glpoEWGfDINUGHDrT8BicXeCkGcPXTp+G6Ym0Prj4jK8f//preyICsTrX6MKun",
	"zJ+OZqj9YQkPlNCBaswY9+DshqVwCVzDuiRb8JWrxCSxW5uEVHQHwGYvlEMAc453+vfarooLQm3aXN6P",
	"r6qWP5/esHDWB7ouFT+D9XKwDg/7YjA27zWKc3DLdaMvRSvbfDZvfpxddMSC2fXgBSZ2l5tOCajeHz25",
	"3TLvxdKtu4cEaxLjx6eBjtSHJLPApsPqfHxxJhaZq+TJ10Q3OUh32fY+sniXz3nDaIZ84KSF/jtl53wY",
	"ieZ66slGdd17rbTj7ng2ED/Xu07r3St2ujKh3pl5jWOyPoRTrbuF8J/02F62RBDJeLsJO8B8xqjc+PaY",
	"wrdyDPjd/Hw9+8sr/stly8H/sZoOWTKPtSr2jXPbEvaauV5/a/OA2TBkrJXH8UDyJcF7EzsdixzScGSC",
	"BikmCZqgRN1h8f0kVvF3QsUd+Z1tGTvJEltMz+BoQ0RAhIGSq/P5dfDhchqYJ4wViUycgxXj5rhiVjAv",
	"lntJZKJN85xqWaiCZGh8Mj55Z+KSAcUZQRP03nzShSc3JjojUaxBYvRU/pjGe1MWyoPdV3CvQMigpA5q",
	"L2sZcOPMNNZQ764F4N347J0CpyCBCzT5Wlemsa2qaXpmHvTQxPiAQvfSjaqmoyqWSq4gdO/m3mtUXaNr",
	"Sr/SewV8V2p1tPOhym8tMQj50W0cZkJYwMFZlriqGH0TtgVLUT2XbDNZ8ePUcp2GKCW0/FEv+HrdftZZ",
	"+EeNx6e/Bc34iIbPZpqJjFFhAeV0PO7l3ICLg0Eyj+nVTuGGKnggchOYwsI0LvzJgIvI3aSEbd0VVok8",
	"muH2jyceExWFR60Y4gAcTYiESlPMdy/3myYemQkiRha8jZ3Pm/APQmODdjZXPyg1dps+VhLeVg6k4lQE",
	"OEmCDKR4FvUn828XyDSE3dCyPps6AaWV7yLcBpXO2uOgZItGP07eDND8oyHS1eyx0bEal/8WH1uWvB5d",
	"6fYz05j5ThXkrytvEBibXWVk6U057xXF9aI2whkZbd+NkK4qide+PvoQRSBEIJm3WasthJpdUTK3LkeN",
	"fQXtb/f/BgAA///l/ZLJ5x8AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

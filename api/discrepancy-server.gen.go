// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Request settlement discrepancy
	// (PUT /settlements/{settlementId})
	CalculateSettlementDiscrepancy(ctx echo.Context, settlementId string, params CalculateSettlementDiscrepancyParams) error
	// Returns all pets
	// (GET /usages/)
	FindUsages(ctx echo.Context) error
	// Request usage discrepancy
	// (PUT /usages/{usageId})
	CalculateUsageDiscrepancy(ctx echo.Context, usageId string, params CalculateUsageDiscrepancyParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CalculateSettlementDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateSettlementDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "settlementId" -------------
	var settlementId string

	err = runtime.BindStyledParameter("simple", false, "settlementId", ctx.Param("settlementId"), &settlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter settlementId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateSettlementDiscrepancyParams
	// ------------- Required query parameter "partnerSettlementId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerSettlementId", ctx.QueryParams(), &params.PartnerSettlementId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerSettlementId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateSettlementDiscrepancy(ctx, settlementId, params)
	return err
}

// FindUsages converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsages(ctx)
	return err
}

// CalculateUsageDiscrepancy converts echo context to params.
func (w *ServerInterfaceWrapper) CalculateUsageDiscrepancy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "usageId" -------------
	var usageId string

	err = runtime.BindStyledParameter("simple", false, "usageId", ctx.Param("usageId"), &usageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter usageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CalculateUsageDiscrepancyParams
	// ------------- Required query parameter "partnerUsageId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partnerUsageId", ctx.QueryParams(), &params.PartnerUsageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partnerUsageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CalculateUsageDiscrepancy(ctx, usageId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/settlements/:settlementId", wrapper.CalculateSettlementDiscrepancy)
	router.GET(baseURL+"/usages/", wrapper.FindUsages)
	router.PUT(baseURL+"/usages/:usageId", wrapper.CalculateUsageDiscrepancy)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vIK2D9t/AwAA//9UHMwihiMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
